#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cmn = require('muchmala-cmn')
  , program = require('commander')
  , package = require('../package.json')
  , async = require('async')
  , path = require('path')
  , _ = require('lodash')
  , fs = require('fs');

// Current working directory
var cwd = process.cwd();

/**
 * CLI
 */
program
  .version(package.version)
  .option('-p, --piece [piece]', 'piece size, default: 120')
  .option('-s, --sprite [sprite]', 'sprite size, default: 5')
  .option('-a, --start [start]', 'start index of the puzzles list')
  .option('-z, --stop [stop]', 'stop index of the puzzles list')
  .option('-o, --out [out]', 'output dir, default: CWD');

program
  .command('create <image|dir> [options]')
  .description('create new puzzle')
  .action(create);

program
  .command('covers [options]')
  .description('create covers')
  .action(covers);

program
  .command('frames [options]')
  .description('create frames')
  .action(frames);

program
  .command('list [options]')
  .description('get puzzles list')
  .action(list);

program
  .command('count')
  .description('get puzzles count')
  .action(count);

var redisClient = cmn.helpers.redisClient(process.env.REDIS_URL || 'redis://127.0.0.1:6379/0');

function create(imagePath) {
  imagePath = path.resolve(cwd, imagePath);

  var builder = new cmn.Builder(redisClient);
  var stat = fs.statSync(imagePath);
  var images;

  if (stat.isDirectory()) {
    images = fs.readdirSync(imagePath);
  } else {
    images = [imagePath];
  }

  images = _.filter(images, function(img) {
    return ~['.jpg', '.png'].indexOf(path.extname(img));
  });
  images = _.map(images, function(img) {
    return path.resolve(imagePath, img);
  });

  if (!images.length)
    process.exit();

  builder.buildPuzzle({
    dirPath    : path.resolve(cwd, program.out || '')  
  , pieceSize  : +program.piece  || 120
  , spriteSize : +program.sprite || 5
  , images     : images
  }, function(err) {
    if (err) throw err;
    process.exit(1);
  });
}

function covers() {
  var builder = new cmn.Builder(redisClient);

  builder.buildCovers({
    dirPath    : path.resolve(cwd, program.out || '')  
  , pieceSize  : +program.piece || 120
  }, function(err) {
    if (err) throw err;
    process.exit(1);
  });
}

function frames() {
  var builder = new cmn.Builder(redisClient);

  builder.buildFrames({
    dirPath    : path.resolve(cwd, program.out || '')  
  , pieceSize  : +program.piece || 120
  }, function(err) {
    if (err) throw err;
    process.exit(1);
  });
}

function list() {
  var puzzles = new cmn.db.Puzzles(redisClient);
  
  var op = {};
  program.start && (op.start = +program.start);
  program.stop && (op.stop = +program.stop);

  puzzles.getPuzzles(op, function(err, list) {
    if (err) throw err;
    
    _.each(list, function(puzzle, i) {
      var date = new Date(+puzzle.time);

      console.log('%d\t%s\t%dx%d\t%d\t%d\t%s\t%d', i, puzzle.id, puzzle.lenHor,
        puzzle.lenVer, puzzle.pieceSize, puzzle.spriteSize,
        date.toLocaleDateString(), puzzle.public);
    });

    process.exit(1);
  });
}

function count() {
  var puzzles = new cmn.db.Puzzles(redisClient);

  puzzles.getPuzzlesCount(function(err, count) {
    if (err) throw err;
    console.log(count);
    process.exit(1);
  });
}

program.parse(process.argv);
